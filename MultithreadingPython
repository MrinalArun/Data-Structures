
import threading
import time

exitFlag = 0

class myThread (threading.Thread):
   def __init__(self, threadID, name, counter):
      threading.Thread.__init__(self)
      self.threadID = threadID
      self.name = name
      self.counter = counter
   def run(self):
      print("Starting " + self.name)
      print_time(self.name, self.counter, 5)
      print("Exiting " + self.name)

def print_time(threadName, counter, delay):
   while counter:
      if exitFlag:
         threadName.exit()
      time.sleep(delay)
      print("%s: %s" % (threadName, time.ctime(time.time())))
      counter -= 1

# Create new threads
thread1 = myThread(1, "Thread-1", 1)
thread2 = myThread(2, "Thread-2", 2)

# Start new Threads
thread1.start()
thread2.start()

print("Exiting Main Thread")



#!/usr/bin/python
import threading
from random import randint
from time import sleep


def print_number(number):
    #Sleeps a random 1 to 10 seconds
    rand_int_var = randint(1, 10)
    sleep(rand_int_var)
    print("Thread " + str(number) + " slept for " + str(rand_int_var) + " seconds")

thread_list = []

for i in range(1, 10):
    #Instantiates the thread
    #(i) does not make a sequence, so (i,)
    t = threading.Thread(target=print_number, args=(i,))
    #Sticks the thread in a list so that it remains accessible
    thread_list.append(t)

#Starts threads
for thread in thread_list:
    thread.start()

#This blocks the calling thread until the thread whose join() method is called is terminated.
#From http://docs.python.org/2/library/threading.html#thread-objects
for thread in thread_list:
    thread.join()

#Demonstrates that the main process waited for threads to complete
print("Done")

